import xvdom from '../../src/index.js';

// Generated by instrumenting xvdom to count every dynamic rendered for a
// non-trivial app (currently ticker).
const COUNTS = {
  boolean :  1,
  null    : 10,
  string  : 49,
  number  :  0,
  instance: 36,
  array   :  5
};

const DYNAMIC_FACTORIES = {
  string:   (i)=> `hello ${String.fromCharCode(65 + (i % 26))}`,
  instance: (i)=> <b>hello</b>,
  null:     (i)=> null,
  array:    (i)=> [],
  boolean:  (i)=> !(i % 2),
  number:   (i)=> i
};

const createValues = (counts, numValues, reverse)=>{
  const keys = (reverse ? (a=>a.reverse()) : (a=>a))(Object.keys(counts));
  const sum = keys.reduce(((sum, key) => sum + counts[key]), 0);
  const values = [];
  let i=0;

  keys.forEach(key =>{
    let numOfDynamics = (100 * (counts[key] / sum))|0;
    while(numOfDynamics--){
      values[i++] = DYNAMIC_FACTORIES[key](i);
    }
  });

  return values;
};

const CompPart = ({start, values})=>(
  <div>
    <span>{values[0 + start]}</span>
    <span>{values[1 + start]}</span>
    <span>{values[2 + start]}</span>
    <span>{values[3 + start]}</span>
    <span>{values[4 + start]}</span>
  </div>
);

const CompPartPrefix = ({start, values})=>(
  <div>
    <span><span>prefix</span>{values[0 + start]}</span>
    <span><span>prefix</span>{values[1 + start]}</span>
    <span><span>prefix</span>{values[2 + start]}</span>
    <span><span>prefix</span>{values[3 + start]}</span>
    <span><span>prefix</span>{values[4 + start]}</span>
  </div>
);

const Comp = ({values})=>(
  <div>
    <CompPart values={values} start={0} />
    <CompPart values={values} start={5} />
    <CompPart values={values} start={10} />
    <CompPart values={values} start={15} />
    <CompPart values={values} start={20} />
    <CompPart values={values} start={25} />
    <CompPart values={values} start={30} />
    <CompPart values={values} start={35} />
    <CompPart values={values} start={40} />
    <CompPart values={values} start={45} />
    <CompPartPrefix values={values} start={50} />
    <CompPartPrefix values={values} start={55} />
    <CompPartPrefix values={values} start={60} />
    <CompPartPrefix values={values} start={65} />
    <CompPartPrefix values={values} start={70} />
    <CompPartPrefix values={values} start={75} />
    <CompPartPrefix values={values} start={80} />
    <CompPartPrefix values={values} start={85} />
    <CompPartPrefix values={values} start={90} />
    <CompPartPrefix values={values} start={95} />
  </div>
);

const renderInstance = (values)=> <Comp values={values} />;

const render = ()=>
  xvdom.render(renderInstance(createValues(COUNTS, 100)));

const rerender = (node)=>
  xvdom.rerender(node, renderInstance(createValues(COUNTS, 100, true)));

const benchmark = ()=>{
  let i=0;
  let node;
  while(i++ < 1000){
    node = render();
    rerender(node);
  }
};

const test = ()=>{
  const EXPECTED_TEXT_CONTENT          = 'helloKhelloLhelloMhelloNhelloOhelloPhelloQhelloRhelloShelloThelloUhelloVhelloWhelloXhelloYhelloZhelloAhelloBhelloChelloDhelloEhelloFhelloGhelloHhelloIhelloJhelloKhelloLhelloMhelloNhelloOhelloPhelloQhelloRhelloShelloThelloUhelloVhelloWhelloXhelloYprefixhelloZprefixhelloAprefixhelloBprefixhelloCprefixhelloDprefixhelloEprefixhelloFprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixprefixprefixprefixprefixprefixprefixprefix';
  const EXPECTED_TEXT_CONTENT_RERENDER = 'hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohelloOhelloPhelloQhelloRhelloShelloThelloUhelloVhelloWhelloXhelloYprefixhelloZprefixhelloAprefixhelloBprefixhelloCprefixhelloDprefixhelloEprefixhelloFprefixhelloGprefixhelloHprefixhelloIprefixhelloJprefixhelloKprefixhelloLprefixhelloMprefixhelloNprefixhelloOprefixhelloPprefixhelloQprefixhelloRprefixhelloSprefixhelloTprefixhelloUprefixhelloVprefixhelloWprefixhelloXprefixhelloYprefixhelloZprefixhelloAprefixhelloBprefixhelloCprefixhelloDprefixhelloEprefixhelloFprefixhelloGprefixhelloHprefixhelloIprefixhelloJprefixprefixprefixprefixprefixprefixprefixprefixprefixprefixprefixprefixprefix';
  const node = render();

  let textContent = node.textContent.replace(/\s+/g, '');
  let pass = textContent === EXPECTED_TEXT_CONTENT;
  let message = '';
  message += (
    pass
      ? 'SUCCESS'
      : `FAIL: expected textContent to be...\n"${EXPECTED_TEXT_CONTENT}"\nbut got...\n"${textContent}"`
  );

  rerender(node);

  textContent = node.textContent.replace(/\s+/g, '');
  pass = textContent === EXPECTED_TEXT_CONTENT_RERENDER;
  message += (
    pass
      ? 'RERENDER SUCCESS'
      : `RERENDER FAIL: expected textContent to be...\n"${EXPECTED_TEXT_CONTENT_RERENDER}"\nbut got...\n"${textContent}"`
  );

  document.write(message);
};

const runBenchmark = ()=>{
  var end;
  var start = window.performance.now();
  benchmark();
  end = window.performance.now();
  document.write((end - start).toFixed(3) + 'ms');
}

if(window.location.search === '?test') test();
else runBenchmark();
