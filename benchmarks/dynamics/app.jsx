import xvdom from '../../src/index.js';

// Generated by instrumenting xvdom to count every dynamic rendered for a
// non-trivial app (currently ticker).
const COUNTS = {
  boolean :  1,
  null    : 10,
  string  : 49,
  number  :  0,
  instance: 36,
  array   :  5
};

const DYNAMIC_FACTORIES = {
  string:   (i)=> `hello ${String.fromCharCode(65 + (i % 26))}`,
  instance: (i)=> <b>hello</b>,
  null:     (i)=> null,
  array:    (i)=> [],
  boolean:  (i)=> !(i % 2),
  number:   (i)=> i
};

const createValues = (counts, numValues, reverse)=>{
  const keys = (reverse ? (a=>a.reverse()) : (a=>a))(Object.keys(counts));
  const sum = keys.reduce(((sum, key) => sum + counts[key]), 0);
  const values = [];
  let i=0;

  keys.forEach(key =>{
    let numOfDynamics = (100 * (counts[key] / sum))|0;
    while(numOfDynamics--){
      values[i++] = DYNAMIC_FACTORIES[key](i);
    }
  });

  return values;
};

const Comp = ({values})=>(
  <div>
    <span>{values[0]}</span>
    <span>{values[1]}</span>
    <span>{values[2]}</span>
    <span>{values[3]}</span>
    <span>{values[4]}</span>
    <span>{values[5]}</span>
    <span>{values[6]}</span>
    <span>{values[7]}</span>
    <span>{values[8]}</span>
    <span>{values[9]}</span>
    <span>{values[10]}</span>
    <span>{values[11]}</span>
    <span>{values[12]}</span>
    <span>{values[13]}</span>
    <span>{values[14]}</span>
    <span>{values[15]}</span>
    <span>{values[16]}</span>
    <span>{values[17]}</span>
    <span>{values[18]}</span>
    <span>{values[19]}</span>
    <span>{values[20]}</span>
    <span>{values[21]}</span>
    <span>{values[22]}</span>
    <span>{values[23]}</span>
    <span>{values[24]}</span>
    <span>{values[25]}</span>
    <span>{values[26]}</span>
    <span>{values[27]}</span>
    <span>{values[28]}</span>
    <span>{values[29]}</span>
    <span>{values[30]}</span>
    <span>{values[31]}</span>
    <span>{values[32]}</span>
    <span>{values[33]}</span>
    <span>{values[34]}</span>
    <span>{values[35]}</span>
    <span>{values[36]}</span>
    <span>{values[37]}</span>
    <span>{values[38]}</span>
    <span>{values[39]}</span>
    <span>{values[40]}</span>
    <span>{values[41]}</span>
    <span>{values[42]}</span>
    <span>{values[43]}</span>
    <span>{values[44]}</span>
    <span>{values[45]}</span>
    <span>{values[46]}</span>
    <span>{values[47]}</span>
    <span>{values[48]}</span>
    <span>{values[49]}</span>
    <span>
      <span>prefix</span>
      {values[50]}
    </span>
    <span>
      <span>prefix</span>
      {values[51]}
    </span>
    <span>
      <span>prefix</span>
      {values[52]}
    </span>
    <span>
      <span>prefix</span>
      {values[53]}
    </span>
    <span>
      <span>prefix</span>
      {values[54]}
    </span>
    <span>
      <span>prefix</span>
      {values[55]}
    </span>
    <span>
      <span>prefix</span>
      {values[56]}
    </span>
    <span>
      <span>prefix</span>
      {values[57]}
    </span>
    <span>
      <span>prefix</span>
      {values[58]}
    </span>
    <span>
      <span>prefix</span>
      {values[59]}
    </span>
    <span>
      <span>prefix</span>
      {values[60]}
    </span>
    <span>
      <span>prefix</span>
      {values[61]}
    </span>
    <span>
      <span>prefix</span>
      {values[62]}
    </span>
    <span>
      <span>prefix</span>
      {values[63]}
    </span>
    <span>
      <span>prefix</span>
      {values[64]}
    </span>
    <span>
      <span>prefix</span>
      {values[65]}
    </span>
    <span>
      <span>prefix</span>
      {values[66]}
    </span>
    <span>
      <span>prefix</span>
      {values[67]}
    </span>
    <span>
      <span>prefix</span>
      {values[68]}
    </span>
    <span>
      <span>prefix</span>
      {values[69]}
    </span>
    <span>
      <span>prefix</span>
      {values[70]}
    </span>
    <span>
      <span>prefix</span>
      {values[71]}
    </span>
    <span>
      <span>prefix</span>
      {values[72]}
    </span>
    <span>
      <span>prefix</span>
      {values[73]}
    </span>
    <span>
      <span>prefix</span>
      {values[74]}
    </span>
    <span>
      <span>prefix</span>
      {values[75]}
    </span>
    <span>
      <span>prefix</span>
      {values[76]}
    </span>
    <span>
      <span>prefix</span>
      {values[77]}
    </span>
    <span>
      <span>prefix</span>
      {values[78]}
    </span>
    <span>
      <span>prefix</span>
      {values[79]}
    </span>
    <span>
      <span>prefix</span>
      {values[80]}
    </span>
    <span>
      <span>prefix</span>
      {values[81]}
    </span>
    <span>
      <span>prefix</span>
      {values[82]}
    </span>
    <span>
      <span>prefix</span>
      {values[83]}
    </span>
    <span>
      <span>prefix</span>
      {values[84]}
    </span>
    <span>
      <span>prefix</span>
      {values[85]}
    </span>
    <span>
      <span>prefix</span>
      {values[86]}
    </span>
    <span>
      <span>prefix</span>
      {values[87]}
    </span>
    <span>
      <span>prefix</span>
      {values[88]}
    </span>
    <span>
      <span>prefix</span>
      {values[89]}
    </span>
    <span>
      <span>prefix</span>
      {values[90]}
    </span>
    <span>
      <span>prefix</span>
      {values[91]}
    </span>
    <span>
      <span>prefix</span>
      {values[92]}
    </span>
    <span>
      <span>prefix</span>
      {values[93]}
    </span>
    <span>
      <span>prefix</span>
      {values[94]}
    </span>
    <span>
      <span>prefix</span>
      {values[95]}
    </span>
    <span>
      <span>prefix</span>
      {values[96]}
    </span>
    <span>
      <span>prefix</span>
      {values[97]}
    </span>
    <span>
      <span>prefix</span>
      {values[98]}
    </span>
    <span>
      <span>prefix</span>
      {values[99]}
    </span>
  </div>
);

const renderInstance = (values)=> <Comp values={values} />;

const render = ()=>
  xvdom.render(renderInstance(createValues(COUNTS, 100)));

const rerender = (node)=>
  xvdom.rerender(node, renderInstance(createValues(COUNTS, 100, true)));

const benchmark = ()=>{
  let i=0;
  let node;
  while(i++ < 1000){
    node = render();
    rerender(node);
  }
};

if(window.location.search === '?test'){
  const EXPECTED_TEXT_CONTENT          = 'helloKhelloLhelloMhelloNhelloOhelloPhelloQhelloRhelloShelloThelloUhelloVhelloWhelloXhelloYhelloZhelloAhelloBhelloChelloDhelloEhelloFhelloGhelloHhelloIhelloJhelloKhelloLhelloMhelloNhelloOhelloPhelloQhelloRhelloShelloThelloUhelloVhelloWhelloXhelloYprefixhelloZprefixhelloAprefixhelloBprefixhelloCprefixhelloDprefixhelloEprefixhelloFprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixhelloprefixprefixprefixprefixprefixprefixprefixprefix';
  const EXPECTED_TEXT_CONTENT_RERENDER = 'hellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohellohelloOhelloPhelloQhelloRhelloShelloThelloUhelloVhelloWhelloXhelloYprefixhelloZprefixhelloAprefixhelloBprefixhelloCprefixhelloDprefixhelloEprefixhelloFprefixhelloGprefixhelloHprefixhelloIprefixhelloJprefixhelloKprefixhelloLprefixhelloMprefixhelloNprefixhelloOprefixhelloPprefixhelloQprefixhelloRprefixhelloSprefixhelloTprefixhelloUprefixhelloVprefixhelloWprefixhelloXprefixhelloYprefixhelloZprefixhelloAprefixhelloBprefixhelloCprefixhelloDprefixhelloEprefixhelloFprefixhelloGprefixhelloHprefixhelloIprefixhelloJprefixprefixprefixprefixprefixprefixprefixprefixprefixprefixprefixprefixprefix';
  const node = render();
  const textContent = node.textContent.replace(/\s+/g, '');
  const pass = textContent === EXPECTED_TEXT_CONTENT;
  console.log(
    pass
      ? 'SUCCESS'
      : `FAIL: expected textContent to be...\n"${EXPECTED_TEXT_CONTENT}"\nbut got...\n"${textContent}"`
  );

  rerender(node);

  const textContentRerender = node.textContent.replace(/\s+/g, '');
  const passRerender = textContentRerender === EXPECTED_TEXT_CONTENT_RERENDER;
  console.log(
    passRerender
      ? 'RERENDER SUCCESS'
      : `RERENDER FAIL: expected textContent to be...\n"${EXPECTED_TEXT_CONTENT_RERENDER}"\nbut got...\n"${textContentRerender}"`
  );
}
else {
  console.time('render');
  benchmark();
  console.timeEnd('render');
}
